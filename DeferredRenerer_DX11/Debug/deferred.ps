Texture2D shaderTexture;
Texture2D shadowDepthTexture;

SamplerState SampleType;

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float4 worldPos : TEXCOORD1;
    float4 lightViewPosition : TEXCOORD2;

};

struct PixelOutputType
{
    float4 color : SV_Target0;
    float4 normal : SV_Target1;
    float4 position : SV_Target2;
    float4 depth : SV_Target3;
    float4 lightViewPos : SV_Target4;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelOutputType DeferredPixelShader(PixelInputType input) : SV_TARGET
{
    PixelOutputType output;

    float depth = input.position.z / input.position.w;

    // Sample the color from the texture and store it for output to the render target.
    output.color = shaderTexture.Sample(SampleType, input.tex);
	
    // Store the normal for output to the render target.
    output.normal = float4(input.normal, 1.0f);

    output.position = input.worldPos;

    output.depth = float4(depth.xxx, 1.0f); 

    float shadowColor = 0.0f;

    float2 projectionCoord;
    projectionCoord.x =  input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
    projectionCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;

    float shadowDepth;
    float lightDepth;

	if((saturate(projectionCoord.x) == projectionCoord.x) && (saturate(projectionCoord.y) == projectionCoord.y))
	{
        shadowDepth = shadowDepthTexture.Sample(SampleType, projectionCoord).r;
        lightDepth = input.lightViewPosition.z / input.lightViewPosition.w;
        lightDepth = lightDepth - 0.01f;

    if (lightDepth < shadowDepth)
    {
        shadowColor = 1.0f;
    }

    }

    output.lightViewPos = float4(shadowColor.xxx, 1.0f);


    return output;
}
