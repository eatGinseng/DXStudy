/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
Texture2D shadowDepthTexture;

SamplerState SampleType;


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float4 worldPos : TEXCOORD1;
    float4 lightPosition : TEXCOORD2;

};

struct PixelOutputType
{
    float4 color : SV_Target0;
    float4 normal : SV_Target1;
    float4 position : SV_Target2;
    float4 shadow : SV_Target3;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
PixelOutputType DeferredPixelShader(PixelInputType input) : SV_TARGET
{
    PixelOutputType output;
    float shadowDepthValue;
    float bias = 0.001f;
    float lightDepthValue;
    float shadowColor = 0.0f;

    float2 lightProjectionCoord;
    lightProjectionCoord.x = input.lightPosition.x / input.lightPosition.w / 2.0f + 0.5f; 
    lightProjectionCoord.y = -input.lightPosition.y / input.lightPosition.w / 2.0f + 0.5f;
 
        shadowDepthValue = shadowDepthTexture.Sample(SampleType, lightProjectionCoord).r;

        lightDepthValue = input.lightPosition.z / input.lightPosition.w;
        lightDepthValue = lightDepthValue - bias;

        if (lightDepthValue < shadowDepthValue)
        {
            shadowColor = 0.0f;
        }


    // Sample the color from the texture and store it for output to the render target.
    output.color = shaderTexture.Sample(SampleType, input.tex);
	
    // Store the normal for output to the render target.
    output.normal = float4(input.normal, 1.0f);

    output.position = input.worldPos;

    output.shadow = float4(shadowColor.xxx, 1.0f); 

    return output;
}
