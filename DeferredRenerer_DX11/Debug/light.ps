Texture2D colorTexture;
Texture2D normalTexture;
Texture2D shadowDepthTexture;

SamplerState SampleTypePoint : register(s0);

cbuffer LightBuffer
{
    float3 lightDirection;
    float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float4 lightViewPosition : TEXCOORD1;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 colors;
    float4 normals;
    float3 lightDir;
    float lightIntensity;

    float2 shadowProjectionCoord;
    float lightDepth;
    float shadowDepth;

    float shadowColor = 0.2f;
    float shadowBias = 0.001f;

    float4 outputColor;

    // Sample the colors from the color render texture using the point sampler at this texture coordinate location.
    colors = colorTexture.Sample(SampleTypePoint, input.tex);

    // Sample the normals from the normal render texture using the point sampler at this texture coordinate location.
    normals = normalTexture.Sample(SampleTypePoint, input.tex);
    
    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(normals.xyz, lightDir));

    float4 lightViewPos = shadowDepthTexture.Sample(SampleTypePoint, input.tex);

    shadowProjectionCoord.x = lightViewPos.x / lightViewPos.w / 2.0f + 0.5f;
    shadowProjectionCoord.y = -lightViewPos.y / lightViewPos.w / 2.0f + 0.5f;

    shadowDepth = shadowDepthTexture.Sample(SampleTypePoint, shadowProjectionCoord).r;
    lightDepth = lightViewPos.z / lightViewPos.w;

    if (lightDepth > shadowDepth)
    {
        shadowColor = 1.0f;
    }

    // Determine the final amount of diffuse color based on the color of the pixel combined with the light intensity.
    outputColor = saturate(colors * lightIntensity * shadowColor);

    return outputColor;
}
